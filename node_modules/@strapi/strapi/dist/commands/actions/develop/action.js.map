{"version":3,"file":"action.js","sources":["../../../../src/commands/actions/develop/action.ts"],"sourcesContent":["import path from 'path';\nimport cluster from 'cluster';\nimport fs from 'fs-extra';\nimport chokidar from 'chokidar';\nimport execa from 'execa';\nimport { getOr } from 'lodash/fp';\nimport { joinBy } from '@strapi/utils';\nimport tsUtils from '@strapi/typescript-utils';\nimport type { Strapi } from '@strapi/types';\n\nimport loadConfiguration from '../../../core/app-configuration';\nimport strapi from '../../../Strapi';\nimport { buildTypeScript, buildAdmin } from '../../builders';\n\ninterface CmdOptions {\n  build?: boolean;\n  watchAdmin?: boolean;\n  polling?: boolean;\n  browser?: boolean;\n}\n\n/**\n * `$ strapi develop`\n *\n */\nexport default async ({ build, watchAdmin, polling, browser }: CmdOptions): Promise<void> => {\n  const appDir = process.cwd();\n\n  const isTSProject = await tsUtils.isUsingTypeScript(appDir);\n  const outDir = await tsUtils.resolveOutDir(appDir);\n  const distDir = isTSProject ? outDir : appDir;\n\n  try {\n    if (cluster.isMaster || cluster.isPrimary) {\n      return await primaryProcess({\n        distDir,\n        appDir,\n        build,\n        browser,\n        isTSProject,\n        watchAdmin,\n      });\n    }\n\n    if (cluster.isWorker) {\n      return await workerProcess({ appDir, distDir, watchAdmin, polling, isTSProject });\n    }\n  } catch (e) {\n    console.error(e);\n    process.exit(1);\n  }\n};\n\nconst primaryProcess = async ({\n  distDir,\n  appDir,\n  build,\n  isTSProject,\n  watchAdmin,\n  browser,\n}: {\n  distDir: string;\n  appDir: string;\n  build?: boolean;\n  isTSProject: boolean;\n  watchAdmin?: boolean;\n  browser?: boolean;\n}) => {\n  if (isTSProject) {\n    await buildTypeScript({ srcDir: appDir, distDir, ignoreDiagnostics: true });\n  }\n\n  const config = loadConfiguration({ app: appDir, dist: distDir });\n  const serveAdminPanel = getOr(true, 'admin.serveAdminPanel', config);\n\n  const buildExists = fs.existsSync(path.join(distDir, 'build'));\n\n  // Don't run the build process if the admin is in watch mode\n  if (build && !watchAdmin && serveAdminPanel && !buildExists) {\n    try {\n      await buildAdmin({\n        buildDestDir: distDir,\n        forceBuild: false,\n        optimization: false,\n        srcDir: appDir,\n      });\n    } catch (err) {\n      process.exit(1);\n    }\n  }\n\n  if (watchAdmin) {\n    try {\n      execa(\n        'npm',\n        ['run', '-s', 'strapi', 'watch-admin', '--', '--browser', browser ? 'true' : 'false'],\n        {\n          stdio: 'inherit',\n        }\n      );\n    } catch (err) {\n      process.exit(1);\n    }\n  }\n\n  cluster.on('message', async (worker, message) => {\n    switch (message) {\n      case 'reload':\n        if (isTSProject) {\n          await buildTypeScript({ srcDir: appDir, distDir, ignoreDiagnostics: true });\n        }\n\n        console.info('The server is restarting\\n');\n\n        worker.send('kill');\n        break;\n      case 'killed':\n        cluster.fork();\n        break;\n      case 'stop':\n        process.exit(1);\n        break;\n      default: {\n        break;\n      }\n    }\n  });\n\n  cluster.fork();\n};\n\nconst workerProcess = async ({\n  appDir,\n  distDir,\n  watchAdmin,\n  polling,\n  isTSProject,\n}: {\n  appDir: string;\n  distDir: string;\n  watchAdmin?: boolean;\n  polling?: boolean;\n  isTSProject: boolean;\n}) => {\n  const strapiInstance = await strapi({\n    distDir,\n    autoReload: true,\n    serveAdminPanel: !watchAdmin,\n  }).load();\n\n  await tsUtils.generators.generate({\n    strapi: strapiInstance,\n    pwd: appDir,\n    rootDir: undefined,\n    logger: { silent: true, debug: false },\n    artifacts: { contentTypes: true, components: true },\n  });\n\n  if (isTSProject) {\n    await buildTypeScript({ srcDir: appDir, distDir, ignoreDiagnostics: false });\n  }\n\n  const adminWatchIgnoreFiles = strapiInstance.config.get('admin.watchIgnoreFiles', []);\n  watchFileChanges({\n    appDir,\n    strapiInstance,\n    watchIgnoreFiles: adminWatchIgnoreFiles,\n    polling,\n  });\n\n  process.on('message', async (message) => {\n    switch (message) {\n      case 'kill': {\n        await strapiInstance.destroy();\n        process.send?.('killed');\n        process.exit();\n        break;\n      }\n      default: {\n        break;\n      }\n      // Do nothing.\n    }\n  });\n\n  strapiInstance.start();\n};\n\n/**\n * Init file watching to auto restart strapi app\n */\nfunction watchFileChanges({\n  appDir,\n  strapiInstance,\n  watchIgnoreFiles,\n  polling,\n}: {\n  appDir: string;\n  strapiInstance: Strapi;\n  watchIgnoreFiles: string[];\n  polling?: boolean;\n}) {\n  const restart = async () => {\n    if (strapiInstance.reload.isWatching && !strapiInstance.reload.isReloading) {\n      strapiInstance.reload.isReloading = true;\n      strapiInstance.reload();\n    }\n  };\n\n  const watcher = chokidar.watch(appDir, {\n    ignoreInitial: true,\n    usePolling: polling,\n    ignored: [\n      /(^|[/\\\\])\\../, // dot files\n      /tmp/,\n      '**/src/admin/**',\n      '**/src/plugins/**/admin/**',\n      '**/dist/src/plugins/test/admin/**',\n      '**/documentation',\n      '**/documentation/**',\n      '**/node_modules',\n      '**/node_modules/**',\n      '**/plugins.json',\n      '**/build',\n      '**/build/**',\n      '**/index.html',\n      '**/public',\n      '**/public/**',\n      strapiInstance.dirs.static.public,\n      joinBy('/', strapiInstance.dirs.static.public, '**'),\n      '**/*.db*',\n      '**/exports/**',\n      '**/dist/**',\n      '**/*.d.ts',\n      ...watchIgnoreFiles,\n    ],\n  });\n\n  watcher\n    .on('add', (path) => {\n      strapiInstance.log.info(`File created: ${path}`);\n      restart();\n    })\n    .on('change', (path) => {\n      strapiInstance.log.info(`File changed: ${path}`);\n      restart();\n    })\n    .on('unlink', (path) => {\n      strapiInstance.log.info(`File deleted: ${path}`);\n      restart();\n    });\n}\n"],"names":["tsUtils","cluster","buildTypeScript","loadConfiguration","getOr","fs","path","buildAdmin","execa","strapi","chokidar","joinBy"],"mappings":"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"}