"use strict";
const path = require("path");
const cluster = require("cluster");
const fse = require("fs-extra");
const chokidar = require("chokidar");
const execa = require("execa");
const _ = require("lodash/fp");
const strapiUtils = require("@strapi/utils");
const tsUtils = require("@strapi/typescript-utils");
const index = require("../../../core/app-configuration/index.js");
const Strapi = require("../../../Strapi.js");
const admin = require("../../builders/admin.js");
const typescript = require("../../builders/typescript.js");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const path__default = /* @__PURE__ */ _interopDefault(path);
const cluster__default = /* @__PURE__ */ _interopDefault(cluster);
const fse__default = /* @__PURE__ */ _interopDefault(fse);
const chokidar__default = /* @__PURE__ */ _interopDefault(chokidar);
const execa__default = /* @__PURE__ */ _interopDefault(execa);
const tsUtils__default = /* @__PURE__ */ _interopDefault(tsUtils);
const action = async ({ build, watchAdmin, polling, browser }) => {
  const appDir = process.cwd();
  const isTSProject = await tsUtils__default.default.isUsingTypeScript(appDir);
  const outDir = await tsUtils__default.default.resolveOutDir(appDir);
  const distDir = isTSProject ? outDir : appDir;
  try {
    if (cluster__default.default.isMaster || cluster__default.default.isPrimary) {
      return await primaryProcess({
        distDir,
        appDir,
        build,
        browser,
        isTSProject,
        watchAdmin
      });
    }
    if (cluster__default.default.isWorker) {
      return await workerProcess({ appDir, distDir, watchAdmin, polling, isTSProject });
    }
  } catch (e) {
    console.error(e);
    process.exit(1);
  }
};
const primaryProcess = async ({
  distDir,
  appDir,
  build,
  isTSProject,
  watchAdmin,
  browser
}) => {
  if (isTSProject) {
    await typescript({ srcDir: appDir, distDir, ignoreDiagnostics: true });
  }
  const config = index({ app: appDir, dist: distDir });
  const serveAdminPanel = _.getOr(true, "admin.serveAdminPanel", config);
  const buildExists = fse__default.default.existsSync(path__default.default.join(distDir, "build"));
  if (build && !watchAdmin && serveAdminPanel && !buildExists) {
    try {
      await admin({
        buildDestDir: distDir,
        forceBuild: false,
        optimization: false,
        srcDir: appDir
      });
    } catch (err) {
      process.exit(1);
    }
  }
  if (watchAdmin) {
    try {
      execa__default.default(
        "npm",
        ["run", "-s", "strapi", "watch-admin", "--", "--browser", browser ? "true" : "false"],
        {
          stdio: "inherit"
        }
      );
    } catch (err) {
      process.exit(1);
    }
  }
  cluster__default.default.on("message", async (worker, message) => {
    switch (message) {
      case "reload":
        if (isTSProject) {
          await typescript({ srcDir: appDir, distDir, ignoreDiagnostics: true });
        }
        console.info("The server is restarting\n");
        worker.send("kill");
        break;
      case "killed":
        cluster__default.default.fork();
        break;
      case "stop":
        process.exit(1);
        break;
    }
  });
  cluster__default.default.fork();
};
const workerProcess = async ({
  appDir,
  distDir,
  watchAdmin,
  polling,
  isTSProject
}) => {
  const strapiInstance = await Strapi({
    distDir,
    autoReload: true,
    serveAdminPanel: !watchAdmin
  }).load();
  await tsUtils__default.default.generators.generate({
    strapi: strapiInstance,
    pwd: appDir,
    rootDir: void 0,
    logger: { silent: true, debug: false },
    artifacts: { contentTypes: true, components: true }
  });
  if (isTSProject) {
    await typescript({ srcDir: appDir, distDir, ignoreDiagnostics: false });
  }
  const adminWatchIgnoreFiles = strapiInstance.config.get("admin.watchIgnoreFiles", []);
  watchFileChanges({
    appDir,
    strapiInstance,
    watchIgnoreFiles: adminWatchIgnoreFiles,
    polling
  });
  process.on("message", async (message) => {
    switch (message) {
      case "kill": {
        await strapiInstance.destroy();
        process.send?.("killed");
        process.exit();
        break;
      }
    }
  });
  strapiInstance.start();
};
function watchFileChanges({
  appDir,
  strapiInstance,
  watchIgnoreFiles,
  polling
}) {
  const restart = async () => {
    if (strapiInstance.reload.isWatching && !strapiInstance.reload.isReloading) {
      strapiInstance.reload.isReloading = true;
      strapiInstance.reload();
    }
  };
  const watcher = chokidar__default.default.watch(appDir, {
    ignoreInitial: true,
    usePolling: polling,
    ignored: [
      /(^|[/\\])\../,
      // dot files
      /tmp/,
      "**/src/admin/**",
      "**/src/plugins/**/admin/**",
      "**/dist/src/plugins/test/admin/**",
      "**/documentation",
      "**/documentation/**",
      "**/node_modules",
      "**/node_modules/**",
      "**/plugins.json",
      "**/build",
      "**/build/**",
      "**/index.html",
      "**/public",
      "**/public/**",
      strapiInstance.dirs.static.public,
      strapiUtils.joinBy("/", strapiInstance.dirs.static.public, "**"),
      "**/*.db*",
      "**/exports/**",
      "**/dist/**",
      "**/*.d.ts",
      ...watchIgnoreFiles
    ]
  });
  watcher.on("add", (path2) => {
    strapiInstance.log.info(`File created: ${path2}`);
    restart();
  }).on("change", (path2) => {
    strapiInstance.log.info(`File changed: ${path2}`);
    restart();
  }).on("unlink", (path2) => {
    strapiInstance.log.info(`File deleted: ${path2}`);
    restart();
  });
}
module.exports = action;
//# sourceMappingURL=action.js.map
