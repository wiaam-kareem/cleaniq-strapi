"use strict";
const path = require("path");
const fse = require("fs-extra");
const tsUtils = require("@strapi/typescript-utils");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const path__default = /* @__PURE__ */ _interopDefault(path);
const fse__default = /* @__PURE__ */ _interopDefault(fse);
const tsUtils__default = /* @__PURE__ */ _interopDefault(tsUtils);
const cleanupDistDirectory = async (distDir) => {
  if (!await fse__default.default.pathExists(distDir)) {
    return;
  }
  const dirContent = await fse__default.default.readdir(distDir);
  const validFilenames = dirContent.filter((filename) => filename !== "build");
  for (const filename of validFilenames) {
    await fse__default.default.remove(path__default.default.resolve(distDir, filename));
  }
};
const buildTypeScript = async ({
  srcDir,
  distDir,
  ignoreDiagnostics = false
}) => {
  const isTSProject = await tsUtils__default.default.isUsingTypeScript(srcDir);
  if (!isTSProject) {
    throw new Error(`tsconfig file not found in ${srcDir}`);
  }
  await cleanupDistDirectory(distDir);
  return tsUtils__default.default.compile(srcDir, { configOptions: { ignoreDiagnostics } });
};
module.exports = buildTypeScript;
//# sourceMappingURL=typescript.js.map
